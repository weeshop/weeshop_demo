<?php

/**
 * @file
 * Contains weeshop_demo.module.
 */

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;

const MIGRATION_LIST = [
  'services',
  'stores',
  'product_categories',
  'attribute_values',
  'products',
  'product_variations',
  'product_adverts',
];

/**
 * Implements hook_help().
 */
function weeshop_demo_help($route_name, RouteMatchInterface $route_match): string {
  switch ($route_name) {
    // Main module help for the weeshop_demo module.
    case 'help.page.weeshop_demo':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('WeeShop demonstration data provider.') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Tool to concat the file names with a prefix path.
 */
function _weeshop_demo_migration_concat_file_path(array $data): array {
  $files = explode('|', $data[0]);
  $path = $data[1];

  $new = [];
  foreach ($files as $file) {
    $new[] = $path . $file;
  }
  return $new;
}

/**
 * Dynamic alter the relative file path to an absolute path.
 */
function weeshop_demo_migration_plugins_alter(array &$migrations): void {
  foreach ($migrations as $id => $migration) {
    if (in_array($id, MIGRATION_LIST)) {
      $migration['source']['path'] = __DIR__ . '/' . $migration['source']['path'];
      if (isset($migration['source']['constants']) && isset($migration['source']['constants']['file_source_path'])) {
        $migration['source']['constants']['file_source_path'] = __DIR__ . '/' . $migration['source']['constants']['file_source_path'];
      }
      $migrations[$id] = $migration;
    }
  }
}

/**
 * Import or rollback the demonstration data.
 *
 * @noinspection PhpUnhandledExceptionInspection
 */
function _weeshop_demo_execute_migrations($action = 'import'): void {
  \Drupal::logger('weeshop_demo')->notice('开始导入数据，操作类型：' . $action);
  $migrations = MIGRATION_LIST;
  if ($action === 'rollback') {
    $migrations = array_reverse($migrations);
  }
  foreach ($migrations as $migration_id) {
    $migration = \Drupal::service('plugin.manager.migration')->createInstance($migration_id);
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    if ($action === 'import') {
      $executable->import();
    }
    if ($action === 'rollback') {
      $executable->rollback();
    }
    \Drupal::logger('weeshop_demo')->notice('已处理：' . $migration_id);
  }
  // 为产品分类创建菜单链接.
  /** @var \Drupal\taxonomy\TermStorageInterface $termStorage */
  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $categories = $termStorage->loadTree('product_categories', 0, NULL, TRUE);
  _weeshop_demo_create_menu_links($categories);
}

/**
 * Create menu links for the given categories.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _weeshop_demo_create_menu_links($categories, $parent = NULL, $parent_link = NULL): void {
  foreach ($categories as $category) {
    /** @var \Drupal\taxonomy\TermInterface $category */
    $field = $category->get('parent');
    $empty = $field->isEmpty();
    $entity = $field->entity;
    if ($parent) {
      if ($empty || !$entity || $entity->id() !== $parent) {
        continue;
      }
    }
    else {
      if ($entity !== NULL) {
        continue;
      }
    }

    $data = [
      'bundle' => 'menu_link_content',
      'title' => $category->label(),
      'link' => 'internal:/product-search?f[0]=categories:' . $category->id(),
      'menu_name' => 'main',
      'expanded' => TRUE,
    ];
    if ($parent) {
      $data['parent'] = 'menu_link_content:' . $parent_link->uuid();
    }
    $menu_link = MenuLinkContent::create($data);
    $menu_link->save();
    _weeshop_demo_create_menu_links($categories, $category->id(), $menu_link);
  }
}
